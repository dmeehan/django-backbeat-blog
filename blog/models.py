# blog/models.py

import datetime

from django.conf import settings
from django.contrib.auth.models import User
from django.db import models
from django.db.models import permalink
from django.utils.html import strip_tags
from django.utils.safestring import mark_safe

from django_markup.fields import MarkupField
from django_markup.markup import formatter
from taggit.managers import TaggableManager

from blog.fields import PositionField
from blog.managers import PostManager


class Post(models.Model):
    """
        An article post for the blog.
    """
    objects = PostManager()

    STATUS_LIVE = 1
    STATUS_PENDING = 2
    STATUS_DRAFT = 3
    STATUS_HIDDEN = 4
    STATUS_CHOICES = (
        (STATUS_LIVE, 'Live'),
        (STATUS_PENDING, 'Pending'),
        (STATUS_DRAFT, 'Draft'),
        (STATUS_HIDDEN, 'Hidden'),
    )

    title = models.CharField(max_length=100)
    excerpt = models.TextField()
    body = models.TextField()
    link = models.URLField(blank=True)
    tags = TaggableManager(blank=True)

    # metadata
    slug = models.SlugField(unique_for_date='published')
    author = models.ForeignKey(User, blank=True, null=True)
    status = models.PositiveSmallIntegerField(choices=STATUS_CHOICES,
        default=STATUS_LIVE,
        help_text="Only content with live status will be publicly displayed.")
    published = models.DateTimeField(default=datetime.datetime.now)
    enable_comments = models.BooleanField(default=True)
    markup = MarkupField(default=settings.BLOG_MARKUP_DEFAULT)


    # autocreated fields
    visits = models.IntegerField(default=0, editable=False) #to keep track of most popular posts
    created = models.DateTimeField(auto_now_add=True)
    modified = models.DateTimeField(auto_now=True)


    # Fields to store generated HTML. For use with a markup syntax such as Markdown or Textile
    excerpt_html = models.TextField(editable=False, blank=True)
    body_html = models.TextField(editable=False, blank=True)


    class Meta:
        ordering = ['-date_published']
        get_latest_by = 'date_published'

    def get_previous_post(self):
        return self.get_previous_by_date_published(status=self.STATUS_LIVE)

    def get_next_post(self):
        return self.get_next_by_date_published(status=self.STATUS_LIVE)

    @permalink
    def get_absolute_url(self):
        return ('blog_post_detail', None, {
            'year': self.date_published.year,
            'month': self.date_published.strftime('%b').lower(),
            'day': self.date_published.day,
            'slug': self.slug
        })

    def render_markup(self):
        if settings.BLOG_MARKUP_DEFAULT == 'wysiwyg':
            self.markup = "none"
            self.body_html = self.body
            self.excerpt_html = self.excerpt
        else:
            self.body_html = mark_safe(formatter(self.body, filter_name=self.markup))
            self.excerpt_html = mark_safe(formatter(self.excerpt, filter_name=self.markup))

    def save(self, force_insert=False, force_update=False):
        self.render_markup()
        super(TextBlockBase, self).save(force_insert, force_update)

    def __unicode__(self):
        return u'%s' % self.title

    # the following method is optional
    def get_twitter_message(self):
        return u'%s - %s' % (self.title, self.excerpt)

class PostImage(models.Model):

    image = models.ImageField(upload_to='images/post')
    title = models.CharField(max_length=255)
    caption = models.TextField(null=True, blank=True)
    public = models.BooleanField(default=True, help_text="This file is publicly available.")

    post = models.ForeignKey(Post)

    order = PositionField(unique_for_field='post')
    is_main = models.BooleanField('Main image', default=False)

    # autogenerated fields
    created = models.DateField(auto_now_add=True, editable=False)
    modified = models.DateField(auto_now=True, editable=False)

    class Meta:
        ordering = ['order']

    def __unicode__(self):
        return u'%s' % self.title

    def save(self):
        if self.is_main:
            related_images = self.objects.filter(self, self.post)
            related_images.update(is_main=False)

        super(PostImage, self).save(*args, **kwargs)
